<?php

function cvl_visualization_init(){
}

/**
 * Implements hook_permission().
 */
function cvl_visualization_permission() {
  return array(
    'administer cvl data visualization' => array(
      'title' => t('Administer CVL data visualization'),
    ),
  );
}


function cvl_visualization_block_info() {
  $blocks = array();
  $blocks['cvl_visualization_block'] = array(
    'info' => t('CVL Data Visualization Module'),
  );
  return $blocks;
}

function cvl_visualization_menu() {
  $items['admin/config/services/cvl_visualization'] = array(
    'title' => 'CVL Data Visualization Module configuration',
    'description' => 'Configuration for the CVL Data Visualization module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cvl_visualization_admin'),
    'access arguments' => array('administer site configuration'),
    'weight' => -5,
    'file' => 'cvl_visualization.admin.inc',
  );

  return $items;
}

function cvl_visualization_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'cvl_visualization_block':
     $block['content'] = cvl_visualization_main_content(); // set the content of the block to our cvl_visualization_main_content
     break;
  }
  return $block;
}


function cvl_visualization_main_content(){
  global $base_url;

  $md_prefix = variable_get('md_prefix');
  $solr_ip = variable_get('solr_ip');
  $solr_port = variable_get('solr_port');
  $ts_ip = variable_get('ts_ip');

  $mpath = drupal_get_path('module', 'cvl_visualization');

  $ol6_path = libraries_get_path('openlayers6');
  $jq_path = drupal_get_path('module', 'jquery_update');

  drupal_add_css($mpath . '/css/cvl_visualization_style.css');
  drupal_add_css($ol6_path . '/css/ol.css');
  drupal_add_css($ol6_path . '/apidoc/styles/bootstrap.min.css');


  drupal_add_js($ol6_path . '/build/ol.js');
  drupal_add_js($ol6_path . '/apidoc/scripts/bootstrap.min.js');
  drupal_add_js('https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.15/proj4.js', 'external');
  drupal_add_js('https://cdn.pydata.org/bokeh/release/bokeh-2.0.2.min.js', 'external');
  drupal_add_js('https://cdn.pydata.org/bokeh/release/bokeh-widgets-2.0.2.min.js', 'external');
  drupal_add_js('https://cdn.pydata.org/bokeh/release/bokeh-tables-2.0.2.min.js', 'external');



  $read_ds = variable_get('datasets');
  $split_ds = array_map('trim', explode(',', $read_ds));
  $datasets = [];

  foreach ($split_ds as $ds) {
    $element = explode('|', $ds);
    $datasets[] = array("id" => $element[0],
                        "core" => $element[1],
                        "ts" => $element[2]);
  }

  //collect data according to core
  foreach ($datasets as $key => $value) {
    if ($value['core'] == 'ADC') {
      $adc_list[] = array($value['id'], $value['ts']);  
    }
    elseif ($value['core'] == 'NBS') {
      $nbs_list[] = array($value['id'], $value['ts']);
    }
  }
  //drupal_set_message(print_r($nbs_list,TRUE),'warning');
  //drupal_set_message(print_r($adc_list,TRUE),'warning');

  $data_info = [];
  $query_nbs = '';
  $query_adc = '';

  // Define queries and extract data info

  $fields = "id, 
             mmd_metadata_identifier, 
             mmd_title, 
             mmd_abstract, 
             mmd_access_constraint, 
             mmd_use_constraint,
             mmd_data_access_type, 
             mmd_data_access_resource, 
             mmd_temporal_extent_start_date, 
             mmd_temporal_extent_end_date, 
             mmd_iso_topic_category, 
             mmd_keywords_keyword, 
             mmd_dataset_production_status, 
             mmd_metadata_status,
             mmd_last_metadata_update, 
             mmd_collection, 
             mmd_activity_type,
             mmd_geographic_extent_rectangle_north, 
             mmd_geographic_extent_rectangle_south, 
             mmd_geographic_extent_rectangle_east, 
             mmd_geographic_extent_rectangle_west, 
             mmd_related_information_type,
             mmd_related_information_resource,
             mmd_data_center_data_center_name_short_name,
             mmd_data_center_data_center_name_long_name,
             mmd_data_center_data_center_url,
             mmd_data_center_contact_role,
             mmd_data_center_contact_name,
             mmd_data_center_contact_email,
             mmd_dataset_citation_dataset_creator,
             mmd_dataset_citation_dataset_title,
             mmd_dataset_citation_dataset_release_date,
             mmd_dataset_citation_dataset_release_place,
             mmd_dataset_citation_dataset_publisher,
             mmd_data_access_wms_layers_wms_layer";


  //collect query according to core
  foreach ($adc_list as $value) { 
    $query_adc .= ($query_adc == '') ? 'mmd_metadata_identifier:"' . $value[0] . '"': ' OR mmd_metadata_identifier:"' . $value[0] . '"';
  }
  //foreach ($nbs_list as $value) { 
  //  $query_nbs .= ($query_nbs == '') ? 'mmd_metadata_identifier:"' . $value[0] . '"': ' OR mmd_metadata_identifier:"' . $value[0] . '"';
  //}

  $day = (new DateTime())->modify('-1 day')->format('Y-m-d\TH:i:s\Z');
  $query_nbs = 'mmd_temporal_extent_start_date:['.$day.' TO *] AND mmd_cloud_cover_value:[* TO 20]';

  // Define connection to SolR for ADC and results of the query
  $adc_l1c = 'adc-l1';
  $adc_t = 'adc-thumbnail';
  $con_adc = new HttpConnection_cvl($solr_ip, $solr_port);
  //drupal_set_message(print_r($con_adc,'TRUE'),'warning');
  $res_adc = $con_adc->get('/solr/'.$adc_l1c.'/select', array("q" =>$query_adc, "start" => 0, "rows" => 1000, "wt" => "json", "fl" => $fields,));
  $query_adc_res = json_decode($res_adc['body'], true);

  // Define connection to SolR for NBS and results of the query
  $nbs_l1c = 'nbs-l1';
  $nbs_t = 'nbs-thumbnail';
  $con_nbs = new HttpConnection_cvl($solr_ip, $solr_port);
  $res_nbs = $con_nbs->get('/solr/'.$nbs_l1c.'/select', array("q" =>$query_nbs, "start" => 0, "rows" => 1000, "wt" => "json", "fl" => $fields,));
  $query_nbs_res = json_decode($res_nbs['body'], true);

  $data_info = [];

  
  $count = 0;
  foreach ($query_adc_res['response']['docs'] as $doc) {
    $id = $doc['id'];
    $metadata_identifier = $doc[$md_prefix . 'metadata_identifier'];
    $title = $doc[$md_prefix . 'title']['0'];
    $abstract = $doc[$md_prefix . 'abstract']['0'];

    $address_tot = $doc[$md_prefix . 'data_access_resource'];
    $dar = cvl_parse_solr_mmd_type_one($address_tot);
    $address_o = isset($dar['"OPeNDAP"']) ? $dar['"OPeNDAP"'] : '';
    $address_w = isset($dar['"OGC WMS"']) ? $dar['"OGC WMS"'] : '';
    $address_h = isset($dar['"HTTP"']) ? $dar['"HTTP"'] : '';
    $address_od = isset($dar['"ODATA"']) ? $dar['"ODATA"'] : '';
    
    //$address_o = json_decode("{".$address_tot[0]."}",true)['OPeNDAP'];
    //$address_w = json_decode("{".$address_tot[1]."}",true)['OGC WMS'];
    //$address_h = json_decode("{".$address_tot[2]."}",true)['HTTP'];
    //$address_od = json_decode("{".$address_tot[3]."}",true)['ODATA'];

    $north = $doc[$md_prefix . 'geographic_extent_rectangle_north'];
    $south = $doc[$md_prefix . 'geographic_extent_rectangle_south'];
    $east = $doc[$md_prefix . 'geographic_extent_rectangle_east'];
    $west = $doc[$md_prefix . 'geographic_extent_rectangle_west'];
    $latlon = array(($south+$north)/2, ($east+$west)/2);

    $time_start = $doc[$md_prefix . 'temporal_extent_start_date'];
    $time_end = isset($doc[$md_prefix . 'temporal_extent_end_date']) ? $doc[$md_prefix . 'temporal_extent_end_date'] : '-';

    $fl_thumb = implode(",", array("thumbnail_data", "thumbnail", "base_map"));
    $con_thumb = new HttpConnection_cvl($solr_ip, $solr_port);
    $res_thumb = $con_thumb->get('/solr/'.$adc_t.'/select', array("q" => $md_prefix . "metadata_identifier:" . "\"" . $id . "\"", "wt" => "json", "fl" => "$fl_thumb",));
    $thumb_dec = json_decode($res_thumb['body'], true);
    $thumbnail_data = isset($thumb_dec['response']['docs'][0]['thumbnail_data']) ? $thumb_dec['response']['docs'][0]['thumbnail_data'] : '' ;

    if (isset($doc[$md_prefix . 'related_information_resource'])){
       $related_info = cvl_parse_related_information_resource($doc[$md_prefix . 'related_information_resource']);
    }  
    $related_lp = isset($related_info['Dataset landing page']['uri']) ? $related_info['Dataset landing page']['uri'] : '';
    //$related_ug = $related_info['Users guide']['uri'];
 
    $isotopic = isset($doc[$md_prefix . 'iso_topic_category']) ? $doc[$md_prefix . 'iso_topic_category']  : '' ;
    $keywords = isset($doc[$md_prefix . 'keywords_keyword'])? $doc[$md_prefix . 'keywords_keyword'] : '' ;
    $collection = isset($doc[$md_prefix . 'collection']) ? $doc[$md_prefix . 'collection'] : '' ;
    $activity = isset($doc[$md_prefix . 'activity_type']) ? $doc[$md_prefix . 'activity_type'] : '' ;

    $ds_prod_status = isset($doc[$md_prefix . 'dataset_production_status']) ? $doc[$md_prefix . 'dataset_production_status'] : '' ;
    $md_status = isset($doc[$md_prefix . 'metadata_status']) ? $doc[$md_prefix . 'metadata_status'] : '' ;
    $last_md_update = isset($doc[$md_prefix . 'last_metadata_update']) ? $doc[$md_prefix . 'last_metadata_update'] : '';


    $dc_sh =  isset($doc[$md_prefix . 'data_center_data_center_name_short_name']) ? $doc[$md_prefix . 'data_center_data_center_name_short_name'] : '';
    $dc_ln =  isset($doc[$md_prefix . 'data_center_data_center_name_long_name']) ? $doc[$md_prefix . 'data_center_data_center_name_long_name'] : '';
    $dc_url = isset($doc[$md_prefix . 'data_center_data_center_url']) ? $doc[$md_prefix . 'data_center_data_center_url'] : '';
    $dc_cr =  isset($doc[$md_prefix . 'data_center_contact_role']) ? $doc[$md_prefix . 'data_center_contact_role'] : '';
    $dc_cn =  isset($doc[$md_prefix . 'data_center_contact_name']) ? $doc[$md_prefix . 'data_center_contact_name'] : '';
    $dc_ce =  isset($doc[$md_prefix . 'data_center_contact_email']) ? $doc[$md_prefix . 'data_center_contact_email'] : '';


    $cit_cr =  isset($doc[$md_prefix . 'dataset_citation_dataset_creator']) ? $doc[$md_prefix . 'dataset_citation_dataset_creator'] : '';
    $cit_tit =  isset($doc[$md_prefix . 'dataset_citation_dataset_title']) ? $doc[$md_prefix . 'dataset_citation_dataset_title'] : '';
    $cit_date =  isset($doc[$md_prefix . 'dataset_citation_dataset_date']) ? $doc[$md_prefix . 'dataset_citation_dataset_date'] : '';
    $cit_place =  isset($doc[$md_prefix . 'dataset_citation_dataset_place']) ? $doc[$md_prefix . 'dataset_citation_dataset_place'] : '';
    $cit_publisher =  isset($doc[$md_prefix . 'dataset_citation_dataset_publisher']) ? $doc[$md_prefix . 'dataset_citation_dataset_publisher'] : '';

    $access_const =  isset($doc[$md_prefix . 'access_constraint']) ? $doc[$md_prefix . 'access_constraint'] : 'Unspecified';
    $use_const =  isset($doc[$md_prefix . 'use_constraint'])? $doc[$md_prefix . 'use_constraint'] : 'Unspecified';

    foreach ($adc_list as $el) {
      if ($el[0] === $metadata_identifier){
         $ts = $el[1];
       }
    }

    $data_info[$count] = array(array($address_o,$address_w,$address_h,$address_od), 
                               $id, 
                               array($north,$south,$east,$west), 
                               $latlon, 
                               $title, 
                               $abstract, 
                               array($time_start, $time_end),
                               $thumbnail_data,
                               array($related_lp),
                               array($isotopic, $keywords, $collection, $activity),
                               array($ds_prod_status, $md_status, $last_md_update),
                               array($dc_sh, $dc_ln, $dc_url, $dc_cr, $dc_cn, $dc_ce),
                               array($cit_cr, $cit_tit, $cit_date, $cit_place, $cit_publisher),
                               $ts, 
                               array($access_const, $use_const),
                               $adc_l1c);

    $count = $count + 1; 
 }

  foreach ($query_nbs_res['response']['docs'] as $doc) {
    $id = $doc['id'];
    $title = $doc[$md_prefix . 'title']['0'];
    $abstract = $doc[$md_prefix . 'abstract']['0'];

    $address_tot = $doc[$md_prefix . 'data_access_resource'];
    $dar = cvl_parse_solr_mmd_type_one($address_tot);
    $address_o = $dar['"OPeNDAP"'];
    $address_w = $dar['"OGC WMS"'];
    $address_h = $dar['"HTTP"'];
    $address_od = $dar['"ODATA"'];

    $north = $doc[$md_prefix . 'geographic_extent_rectangle_north'];
    $south = $doc[$md_prefix . 'geographic_extent_rectangle_south'];
    $east = $doc[$md_prefix . 'geographic_extent_rectangle_east'];
    $west = $doc[$md_prefix . 'geographic_extent_rectangle_west'];
    $latlon = array(($south+$north)/2, ($east+$west)/2);

    $time_start = $doc[$md_prefix . 'temporal_extent_start_date'];
    $time_end = $doc[$md_prefix . 'temporal_extent_end_date'];

    $fl_thumb = implode(",", array("thumbnail_data", "thumbnail", "base_map"));
    $con_thumb = new HttpConnection_cvl($solr_ip, $solr_port);
    $res_thumb = $con_thumb->get('/solr/'.$nbs_t.'/select', array("q" => $md_prefix . "metadata_identifier:" . "\"" . $id . "\"", "wt" => "json", "fl" => "$fl_thumb",));
    $thumb_dec = json_decode($res_thumb['body'], true);
    $thumbnail_data = $thumb_dec['response']['docs'][0]['thumbnail_data'];

    $related_info = cvl_parse_related_information_resource($doc[$md_prefix . 'related_information_resource']);
    $related_lp = $related_info['Dataset landing page']['uri'];
    //$related_ug = $related_info['Users guide']['uri'];

    $isotopic = $doc[$md_prefix . 'iso_topic_category'];
    $keywords = $doc[$md_prefix . 'keywords_keyword'];
    $collection = $doc[$md_prefix . 'collection'];
    $activity = $doc[$md_prefix . 'activity_type'];


    $ds_prod_status = $doc[$md_prefix . 'dataset_production_status'];
    $md_status = $doc[$md_prefix . 'metadata_status'];
    $last_md_update = $doc[$md_prefix . 'last_metadata_update'];


    $dc_sh =  $doc[$md_prefix . 'data_center_data_center_name_short_name'];
    $dc_ln =  $doc[$md_prefix . 'data_center_data_center_name_long_name'];
    $dc_url = $doc[$md_prefix . 'data_center_data_center_url'];
    $dc_cr =  $doc[$md_prefix . 'data_center_contact_role'];
    $dc_cn =  $doc[$md_prefix . 'data_center_contact_name'];
    $dc_ce =  $doc[$md_prefix . 'data_center_contact_email'];


    $cit_cr =  isset($doc[$md_prefix . 'dataset_citation_dataset_creator']) ? $doc[$md_prefix . 'dataset_citation_dataset_creator'] : '';
    $cit_tit =  isset($doc[$md_prefix . 'dataset_citation_dataset_title']) ? $doc[$md_prefix . 'dataset_citation_dataset_title'] : '';
    $cit_date =  isset($doc[$md_prefix . 'dataset_citation_dataset_date']) ? $doc[$md_prefix . 'dataset_citation_dataset_date'] : '';
    $cit_place =  isset($doc[$md_prefix . 'dataset_citation_dataset_place']) ? $doc[$md_prefix . 'dataset_citation_dataset_place'] : '';
    $cit_publisher =  isset($doc[$md_prefix . 'dataset_citation_dataset_publisher']) ? $doc[$md_prefix . 'dataset_citation_dataset_publisher'] : '';

    $access_const =  isset($doc[$md_prefix . 'access_constraint']) ? $doc[$md_prefix . 'access_constraint'] : 'Unspecified';
    $use_const =  isset($doc[$md_prefix . 'use_constraint'])? $doc[$md_prefix . 'use_constraint'] : 'Unspecified';
    //drupal_set_message(print_r($access_const,'TRUE'),'warning');

    $ts = 'false';

    $data_info[$count] = array(array($address_o,$address_w,$address_h,$address_od), 
                               $id, 
                               array($north,$south,$east,$west), 
                               $latlon, 
                               $title, 
                               $abstract, 
                               array($time_start, $time_end),
                               $thumbnail_data,
                               array($related_lp),
                               array($isotopic, $keywords, $collection, $activity),
                               array($ds_prod_status, $md_status, $last_md_update),
                               array($dc_sh, $dc_ln, $dc_url, $dc_cr, $dc_cn, $dc_ce),
                               array($cit_cr, $cit_tit, $cit_date, $cit_place, $cit_publisher),
                               $ts, 
                               array($access_const, $use_const),
                               $nbs_l1c);

    $count = $count + 1; 
 }


  drupal_json_encode($data_info);
  drupal_add_js(array('extracted_info' => $data_info,
                      'pins' => 'TRUE',
                      'ts_ip' => $ts_ip,
                      'path' => $mpath,
                      'site_name' => $base_url), 'setting');

  

return 

  $string = <<<EOM
  <div id="popup" class="ol-popup">
    <div id="popup-content"></div>
  </div>
  <div id="map-cvl" class="map-cvl">
     <input type="radio" id="4326" name="cvl-projection" value="EPSG:4326">WGS:84</input>
     <input type="radio" id="32661" name="cvl-projection" value="EPSG:32661">UPS North</input>
     <script type="text/javascript" src="/$mpath/js/cvl_visualization.js"></script>
  </div>

EOM;

}



//Currently supports POST requests only.

/**
 * Example:
 *  $con = new HttpConnection('normap-dev.met.no','8080');
 *  $res=$con->get('/solr/l1-adcsolr/select',array("q"=>"*:*","rows"=>30,"wt"=>"json","indent"=>"true"));
 */
class HttpConnection_cvl {

    private $host;
    private $path;
    private $request;
    private $response = '';
    private $headers;
    private $response_body;
    private $response_headers;

    public function __construct($host, $port) {

        $this->host = $host;

        $this->port = $port;

        $this->headers = new HeaderList(array(), "\r\n");
    }

    public function get($path, $params = array(), $headers = array()) {

        return $this->send($path, 'get', $params, $headers);
    }

    public static function serialize_auth($user, $pass) {

        return base64_encode("$user:$pass");
    }

    public static function serialize_params($params) {

        $query_string = '';

        foreach ($params as $key => $value) {

            $query_string .= '&' . urlencode($key) . '=' . urlencode($value);
        }

        return substr($query_string, 1);
    }

    private function send($path, $method, $params = array(), $headers = array()) {

        $this->headers->add($headers);

        $params = self::serialize_params($params);



        $this->request = strtoupper($method) . " http://{$this->host}:{$this->port}{$path}?{$params} HTTP/1.0\r\n";

        $this->request .= $this->headers->to_s() . "\r\n";

        if ($fp = fsockopen($this->host, $this->port, $errno, $errstr, 15)) {

            if (fwrite($fp, $this->request)) {

                while (!feof($fp)) {

                    $this->response .= fread($fp, 4096);
                }
            }
//              sdpm("This is the request sent to host:");
//              sdpm($this->request);
//              sdpm(urldecode($this->request));

            fclose($fp);
        }
        else {

            throw new Exception("could not establish connection with $host");
        }



        return $this->parse_response();
    }

    private function parse_response() {

        $this->response = str_replace("\r\n", "\n", $this->response);

        list($headers, $body) = explode("\n\n", $this->response, 2);

        $headers = new HeaderList_cvl($headers);
        return array('headers' => $headers->to_a(), 'body' => $body, 'code' => $headers->get_response_code());
    }

}

/**
 * should be moved out to its own file
 */
class HeaderList_cvl {

    private $headers;
    private $response_code;
    private $linebreak;

    public function __construct($headers = array(), $linebreak = "\n") {

        $this->linebreak = $linebreak;

        $this->headers = $headers;

        if (is_string($this->headers)) {

            $this->parse_headers_string();
        }
    }

    public function to_s() {

        $headers = '';

        foreach ($this->headers as $header => $value) {

            $headers .= "$header: $value{$this->linebreak}";
        }

        return $headers;
    }

    public function to_a() {

        return $this->headers;
    }

    public function __toString() {

        return $this->to_s();
    }

    public function add($headers) {

        $this->headers = array_merge($this->headers, $headers);
    }

    public function get($header) {

        return $this->headers[$header];
    }

    public function get_response_code() {

        return $this->response_code;
    }

    private function parse_headers_string() {

        $replace = ($this->linebreak == "\n" ? "\r\n" : "\n");

        $headers = str_replace($replace, $this->linebreak, trim($this->headers));

        $headers = explode($this->linebreak, $headers);

        $this->headers = array();

        if (preg_match('/^HTTP\/\d\.\d (\d{3})/', $headers[0], $matches)) {

            $this->response_code = $matches[1];

            array_shift($headers);
        }

        foreach ($headers as $string) {

            list($header, $value) = explode(': ', $string, 2);

            $this->headers[$header] = $value;
        }
    }

}


function cvl_parse_related_information_resource($rir) {
    $related_information_resource = [];
    foreach ($rir as $rir_elem) {
        $la = explode(':', $rir_elem, 2);
        $protocol = str_replace('"', '', $la[0]);
        $ma = explode(',', $la[1], 2);
        $uri = str_replace('"', '', $ma[0]);
        $na = explode(':', $ma[1], 2);
        $description_name = str_replace('"', '', $na[0]);
        $description_value = str_replace('"', '', $na[1]);
        $related_information_resource[$protocol]['uri'] = $uri;
        $related_information_resource[$protocol][$description_name] = $description_value;
    } return $related_information_resource;
}

function cvl_parse_solr_mmd_type_one($metadata_element) {

  $element_array = [];
  if (is_array($metadata_element)) {
    foreach ($metadata_element as $k => $v) {
      $la = explode(",", $v);
      $lal = explode(":", $la[0], 2);
      $lar = explode(":", $la[1], 2);
      $element_array[$lal[0]] = str_replace(array('"'), '', $lal[1]);
      $element_array[$lal[0] . " " . $lar[0]] = $lar[1];
    }
  } return $element_array;
}


